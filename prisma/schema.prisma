// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  nickname   String   @unique
  password   String?
  createdAt  DateTime @default(now())
  role       String   @default("USER")
  isVerified Boolean  @default(false)
  provider   String?
  socialId   String?

  HotSpringLodgeReview HotSpringLodgeReview[]

  HotSpringLodgeBookmark HotSpringLodgeBookmark[]

  Reservation Reservation[]

  ReportReview ReportReview[]

  EmailVerification EmailVerification[]

  ticketReservations TicketReservation[]

  ticketReviews TicketReview[]

  ticketBookmarks TicketBookmark[]

  TicketReportReview TicketReportReview[]
}

model EmailVerification {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  userId    Int
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model PasswordResetCode {
  id        Int      @id @default(autoincrement())
  email     String
  code      String
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
  expiredAt DateTime
}

model HotSpringLodge {
  id                Int     @id @default(autoincrement())
  name              String
  nameEn            String?
  address           String
  latitude          Float
  longitude         Float
  description       String?
  descriptionEn     String?
  accommodationType String

  reviews HotSpringLodgeReview[]

  images HotSpringLodgeImage[]

  bookmarks HotSpringLodgeBookmark[]

  details HotSpringLodgeDetail[]

  reservations Reservation[]

  inventories RoomInventory[]

  roomTypes RoomType[]

  ticketTypes TicketType[]

  TicketInventory TicketInventory[]
}

model HotSpringLodgeReview {
  id            Int  @id @default(autoincrement())
  lodgeId       Int
  userId        Int
  reservationId Int?
  rating        Int

  comment      String?
  originalLang String?
  enTranslated String?
  koTranslated String?

  createdAt DateTime @default(now())
  isHidden  Boolean  @default(false)

  lodge       HotSpringLodge @relation(fields: [lodgeId], references: [id])
  user        User           @relation(fields: [userId], references: [id])
  reservation Reservation?   @relation(fields: [reservationId], references: [id])
  reports     ReportReview[]
}

model HotSpringLodgeImage {
  id       Int    @id @default(autoincrement())
  lodgeId  Int
  imageUrl String
  publicId String

  lodge HotSpringLodge @relation(fields: [lodgeId], references: [id])
}

model RoomTypeImage {
  id         Int    @id @default(autoincrement())
  roomTypeId Int
  imageUrl   String
  publicId   String

  roomType RoomType @relation(fields: [roomTypeId], references: [id])
}

model HotSpringLodgeBookmark {
  id        Int      @id @default(autoincrement())
  lodgeId   Int
  userId    Int
  createdAt DateTime @default(now())

  lodge HotSpringLodge @relation(fields: [lodgeId], references: [id])
  user  User           @relation(fields: [userId], references: [id])
}

model HotSpringLodgeDetail {
  id          Int      @id @default(autoincrement())
  lodgeId     Int
  description String?
  amenities   String[]
  policies    String[]
  createdAt   DateTime @default(now())

  lodge HotSpringLodge @relation(fields: [lodgeId], references: [id])
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  PENDING
}

enum CancelReason {
  AUTO_EXPIRED
  USER_REQUESTED
  ADMIN_FORCED
}

model Reservation {
  id           Int           @id @default(autoincrement())
  lodgeId      Int
  userId       Int
  checkIn      DateTime
  checkOut     DateTime
  adults       Int
  children     Int
  roomCount    Int
  cancelReason CancelReason?

  firstName       String
  lastName        String
  nationality     String
  phoneNumber     String
  email           String?
  specialRequests String?

  totalPrice Int?

  createdAt DateTime          @default(now())
  status    ReservationStatus @default(PENDING)

  lodge HotSpringLodge @relation(fields: [lodgeId], references: [id])
  user  User           @relation(fields: [userId], references: [id])

  roomTypeId Int
  roomType   RoomType               @relation(fields: [roomTypeId], references: [id])
  reviews    HotSpringLodgeReview[]
}

model SeasonalPricing {
  id           Int      @id @default(autoincrement())
  roomTypeId   Int
  from         DateTime
  to           DateTime
  basePrice    Int      @default(0)
  weekendPrice Int      @default(0)

  roomType RoomType @relation(fields: [roomTypeId], references: [id])
}

model RoomInventory {
  id             Int      @id @default(autoincrement())
  lodgeId        Int
  roomTypeId     Int
  totalRooms     Int
  availableRooms Int
  date           DateTime

  lodge    HotSpringLodge @relation(fields: [lodgeId], references: [id])
  roomType RoomType       @relation(fields: [roomTypeId], references: [id])
}

model RoomType {
  id           Int     @id @default(autoincrement())
  lodgeId      Int
  name         String
  nameEn       String?
  description  String?
  descriptionEn String?
  basePrice    Int
  weekendPrice Int?
  maxAdults    Int
  maxChildren  Int
  totalRooms   Int

  lodge           HotSpringLodge    @relation(fields: [lodgeId], references: [id])
  reservations    Reservation[]
  seasonalPricing SeasonalPricing[]

  inventories RoomInventory[]

  images RoomTypeImage[]
}

model ReportReview {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int // 신고자
  reason    String
  createdAt DateTime @default(now())

  review HotSpringLodgeReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User                 @relation(fields: [userId], references: [id])
}

model TicketType {
  id                Int      @id @default(autoincrement())
  lodgeId           Int
  name              String
  description       String?
  adultPrice        Int
  childPrice        Int
  totalAdultTickets Int
  totalChildTickets Int
  createdAt         DateTime @default(now())

  lodge HotSpringLodge @relation(fields: [lodgeId], references: [id])

  inventories  TicketInventory[]
  reservations TicketReservation[]
  reviews      TicketReview[]
  bookmarks    TicketBookmark[]
}

model TicketInventory {
  id                    Int      @id @default(autoincrement())
  lodgeId               Int
  ticketTypeId          Int
  date                  DateTime
  totalAdultTickets     Int
  totalChildTickets     Int
  availableAdultTickets Int
  availableChildTickets Int

  ticketType TicketType     @relation(fields: [ticketTypeId], references: [id])
  lodge      HotSpringLodge @relation(fields: [lodgeId], references: [id])
}

model TicketReservation {
  id           Int               @id @default(autoincrement())
  ticketTypeId Int
  userId       Int
  date         DateTime
  adults       Int
  children     Int
  totalPrice   Int?
  createdAt    DateTime          @default(now())
  status       ReservationStatus @default(PENDING)
  cancelReason CancelReason?

  firstName       String
  lastName        String
  nationality     String
  phoneNumber     String
  email           String?
  specialRequests String?

  ticketType TicketType     @relation(fields: [ticketTypeId], references: [id])
  user       User           @relation(fields: [userId], references: [id])
  reviews    TicketReview[]
}

model TicketReview {
  id                  Int @id @default(autoincrement())
  ticketTypeId        Int
  ticketReservationId Int
  userId              Int
  rating              Int

  comment      String?
  originalLang String?
  enTranslated String?
  koTranslated String?

  createdAt DateTime @default(now())
  isHidden  Boolean  @default(false)

  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  user       User       @relation(fields: [userId], references: [id])

  reports     TicketReportReview[]
  reservation TicketReservation    @relation(fields: [ticketReservationId], references: [id])
}

model TicketBookmark {
  id           Int      @id @default(autoincrement())
  ticketTypeId Int
  userId       Int
  createdAt    DateTime @default(now())

  ticketType TicketType @relation(fields: [ticketTypeId], references: [id])
  user       User       @relation(fields: [userId], references: [id])
}

model TicketReportReview {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  reason    String
  createdAt DateTime @default(now())

  review TicketReview @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user   User         @relation(fields: [userId], references: [id])
}

model News {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
